-- Online Learning Platform (Like Udemy, Coursera):

 -- Import all datatset from sqlalchemy import create_engine (python code)
Create database olp;
use olp;

-- Basic Queries:

-- 1.Retrieve all students who registered in the last 6 months.
select * from indian_students_dataset
where registration_date >= date_sub(now(), interval 6 month);

-- 2.Find all courses that cost more than 15000.

ALTER TABLE course_dataset 
RENAME COLUMN `Price (INR)` TO price;

select title as course_name from course_dataset
where Price > 15000;

-- 3.	Find the total number of students enrolled in each course..

select courseid , count(studentid) from enrollments_dataset
group by courseid;

-- Aggregation & Grouping:

-- 4.Find the most enrolled courses (sorted in descending order)

select courseid, count(studentid) as Total_Std
from enrollments_dataset
group by courseid 
order by Total_Std desc;


-- 5.Find the top most 5 enrolled courses names.
select cd.title as Top_5_course_name , count(ed.studentid) as total_std
from course_dataset cd
join enrollments_dataset as ed 
on ed.courceid = cd.courseid
group by cd.courseid
order by total_std desc 
limit 5;

-- 6.List the number of students per instructor.

select max(insd.name) as instructorName , count(ed.studentid) as total_student
from instructors_dataset as insd
join course_dataset as cd on insd.InstructorID = cd.InstructorID
join enrollments_dataset as ed on ed.CourseID = cd.CourseID
group by insd.instructorid;

-- 7.Get the average course price per category. 

select category, avg(price) as average_price
from course_dataset
group by category
order by average_price desc;

-- 8.Find the highest-rated instructor

select `name` , max(rating) as highest_rated
from instructors_dataset
group by `name` 
order by highest_rated desc;

-- 9.Count how many students registered each month in the past year 

SELECT DATE_FORMAT(registration_date, '%Y-%m') AS registration_month, 
       COUNT(studentid) AS student_count
FROM indian_students_dataset
WHERE registration_date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR)
GROUP BY registration_month
ORDER BY student_count desc;

-- Joins & Relationships:

-- 10.Find courses taught by instructors with a rating above 4.5.

select cd.Title as course_name, id.Rating as instructor_rating , id.name as instructor_name
from course_dataset cd
join instructors_dataset as id 
on cd.InstructorID = id.InstructorID
where Rating >= 4.5 
order by  instructor_rating desc;

-- 11.Get all students who have enrolled in more than 3 courses. 

select  id.FullName as std_name, COUNT(courseid) as course_id
from enrollments_dataset ed
join indian_students_dataset as id
on ed.studentid =id.studentid
group by ed.StudentID, id.FullName
HAVING COUNT(courseid) > 3;

-- 12.students who enrolled in "Data Science" course.

select  ed.StudentID as std_id , cd.Category as cource_name 
from enrollments_dataset as ed
join course_dataset as cd
on ed.courseid = cd.courseid
where cd.Category = 'Data Science';

-- Advanced Queries: 

-- 13. Find courses that have no enrollments. 

SELECT cd.courseid, cd.Title as course_name
FROM course_dataset cd
WHERE NOT EXISTS (
    SELECT 1 FROM enrollments_dataset ed
    WHERE ed.courseid = cd.courseid
);

-- 14.Get the revenue generated by each course (Total students * Course Price). 

select 
ed.courseid, 
cd.Title as course_name, 
cd.price as course_price, 
COUNT(ed.studentid) as total_students, 
(COUNT(ed.studentid) * cd.price) as total_revenue
from enrollments_dataset ed
join course_dataset cd 
on ed.courseid = cd.courseid
group by ed.courseid, course_name, cd.price
order by total_revenue desc;  

-- 15.Find the percentage of students who enrolled in a paid course vs. a free course.

select 
    case 
        when cd.price = 0 then 'Free Course'
        else 'Paid Course'
    end as course_type,
    count(ed.studentid) as student_count,
    (count(ed.studentid) * 100.0 / (select count(studentid) from enrollments_dataset)) as percentage
from enrollments_dataset ed
join course_dataset cd 
on ed.courseid = cd.courseid
group by course_type;
 
